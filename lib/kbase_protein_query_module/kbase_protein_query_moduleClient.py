# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kbase_protein_query_module(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def check_protein_existence(self, params, context=None):
        """
        :param params: instance of mapping from String to unspecified object
        :returns: instance of type "CheckProteinExistenceResults" (Check if a
           protein exists in the storage system using UniProt ID and create a
           workspace object with the result. Input: UniProt ID (e.g., P00001,
           P12345) Output: Existence status, family assignment, metadata,
           optional embedding) -> structure: parameter "report_name" of
           String, parameter "report_ref" of String, parameter "exists" of
           Long, parameter "family_id" of String, parameter "metadata" of
           mapping from String to unspecified object, parameter
           "input_parameters" of mapping from String to unspecified object,
           parameter "start_time" of Double, parameter "summary" of String,
           parameter "protein_existence_result_ref" of String, parameter
           "embedding_result_ref" of String
        """
        return self._client.call_method('kbase_protein_query_module.check_protein_existence',
                                        [params], self._service_ver, context)

    def generate_protein_embedding(self, params, context=None):
        """
        :param params: instance of mapping from String to unspecified object
        :returns: instance of type "GenerateProteinEmbeddingResults"
           (Generate protein embeddings from direct sequence input. Creates
           embeddings using ESM-2 model for downstream analysis.) ->
           structure: parameter "report_name" of String, parameter
           "report_ref" of String, parameter "embedding_result_ref" of
           String, parameter "summary" of String, parameter
           "input_parameters" of mapping from String to unspecified object,
           parameter "start_time" of Double, parameter "embedding_norm" of
           Double, parameter "sequence_length" of Long, parameter
           "embedding_dim" of Long
        """
        return self._client.call_method('kbase_protein_query_module.generate_protein_embedding',
                                        [params], self._service_ver, context)

    def assign_family_fast(self, params, context=None):
        """
        :param params: instance of mapping from String to unspecified object
        :returns: instance of type "AssignFamilyFastResults" (Assign a
           protein embedding to a family using similarity to family
           centroids. Uses binary Hamming distance for fast family
           assignment.) -> structure: parameter "family_id" of String,
           parameter "confidence" of Double, parameter "eigenprotein_id" of
           String, parameter "input_parameters" of mapping from String to
           unspecified object, parameter "start_time" of Double, parameter
           "family_assignment_result_ref" of String
        """
        return self._client.call_method('kbase_protein_query_module.assign_family_fast',
                                        [params], self._service_ver, context)

    def find_top_matches_from_embedding(self, params, context=None):
        """
        :param params: instance of mapping from String to unspecified object
        :returns: instance of type "FindTopMatchesFromEmbeddingResults" (Find
           top matches for a given protein embedding within a family. Uses
           FAISS IVF float index for efficient similarity search.) ->
           structure: parameter "matches" of list of mapping from String to
           unspecified object, parameter "summary" of String, parameter
           "input_parameters" of mapping from String to unspecified object,
           parameter "start_time" of Double, parameter "family_id" of String,
           parameter "top_n" of Long, parameter "similarity_stats" of mapping
           from String to Double, parameter "similarity_search_result_ref" of
           String
        """
        return self._client.call_method('kbase_protein_query_module.find_top_matches_from_embedding',
                                        [params], self._service_ver, context)

    def summarize_and_visualize_results(self, params, context=None):
        """
        :param params: instance of mapping from String to unspecified object
        :returns: instance of type "SummarizeAndVisualizeResultsResults"
           (Summarize and visualize protein network analysis results.
           Generates comprehensive HTML reports with network visualization.)
           -> structure: parameter "report_name" of String, parameter
           "report_ref" of String, parameter "input_parameters" of mapping
           from String to unspecified object, parameter "start_time" of
           Double, parameter "output_dir" of String, parameter "summary" of
           String, parameter "html_report_path" of String, parameter
           "sequence_analysis_ref" of String
        """
        return self._client.call_method('kbase_protein_query_module.summarize_and_visualize_results',
                                        [params], self._service_ver, context)

    def run_protein_query_analysis(self, params, context=None):
        """
        :param params: instance of mapping from String to unspecified object
        :returns: instance of type "ProteinQueryAnalysisResults" (Unified
           Protein Query Analysis Pipeline This method provides a single
           entry point for comprehensive protein analysis, supporting
           multiple input types and configurable analysis stages.) ->
           structure: parameter "report_name" of String, parameter
           "report_ref" of String, parameter "analysis_result_ref" of String,
           parameter "summary" of String, parameter "input_parameters" of
           mapping from String to unspecified object, parameter "start_time"
           of Double, parameter "html_report_path" of String, parameter
           "protein_count" of Long, parameter "stages_completed" of list of
           String
        """
        return self._client.call_method('kbase_protein_query_module.run_protein_query_analysis',
                                        [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kbase_protein_query_module.status',
                                        [], self._service_ver, context)
