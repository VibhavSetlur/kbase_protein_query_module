# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class DataFileUtil(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login',
            service_ver='release',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def shock_to_file(self, params, context=None):
        """
        Download a file from Shock.
        :param params: instance of type "ShockToFileParams" (* Input
           parameters for the shock_to_file function. * Required arguments:
           *     shock_id shock_id - the ID of the Shock node *     string
           file_path - the path to save the file to * Optional arguments: *
           string file_url - the URL of the Shock server *     boolean
           unpack - either null, or one of: *         unpack - if the file
           is a tar archive, unpack it *         pack - if the file is a
           directory, pack it into a tar archive *         compress - if
           the file is a tar archive, compress it *         uncompress -
           if the file is a compressed tar archive, uncompress it) ->
           structure: parameter "shock_id" of String, parameter "file_path"
           of String, parameter "file_url" of String, parameter "unpack" of
           String
        :returns: instance of type "ShockToFileOutput" (* Output
           parameters for the shock_to_file function. * Returned data: *
           string file_path - the path to the downloaded file) ->
           structure: parameter "file_path" of String
        """
        return self._client.run_job('DataFileUtil.shock_to_file',
                                    [params], self._service_ver, context)

    def file_to_shock(self, params, context=None):
        """
        Upload a file to Shock.
        :param params: instance of type "FileToShockParams" (* Input
           parameters for the file_to_shock function. * Required arguments:
           *     string file_path - the path to the file to upload *
           Optional arguments: *     string file_url - the URL of the
           Shock server *     string shock_id - the ID of an existing
           Shock node to update *     string attributes - JSON string
           containing attributes to store with the file *     boolean
           make_handle - create a handle for this file *     boolean
           pack - either null, or one of: *         unpack - if the file
           is a tar archive, unpack it *         pack - if the file is a
           directory, pack it into a tar archive *         compress - if
           the file is a tar archive, compress it *         uncompress -
           if the file is a compressed tar archive, uncompress it) ->
           structure: parameter "file_path" of String, parameter "file_url"
           of String, parameter "shock_id" of String, parameter
           "attributes" of String, parameter "make_handle" of type
           "boolean" (@range [0,1]), parameter "pack" of String
        :returns: instance of type "FileToShockOutput" (* Output
           parameters for the file_to_shock function. * Returned data: *
           string shock_id - the ID of the new or updated Shock node *
           string handle - the handle for the file, if created) ->
           structure: parameter "shock_id" of String, parameter "handle"
           of type "Handle" (* A handle for a file stored in Shock. *
           Required arguments: *     string hid - the id of the handle *
           string file_name - the name of the file *     string id - the
           id of the node in Shock *     string type - the type of the
           file *     string url - the url of the shock server *     int
           remote_md5 - the md5 digest of the file * Optional arguments: *
           string remote_sha1 - the sha1 digest of the file *     int
           compressed_size - the compressed size of the file in bytes *
           string compression - the compression type of the file) ->
           structure: parameter "hid" of String, parameter "file_name" of
           String, parameter "id" of String, parameter "type" of String,
           parameter "url" of String, parameter "remote_md5" of String,
           parameter "remote_sha1" of String, parameter "compressed_size"
           of Long, parameter "compression" of String
        """
        return self._client.run_job('DataFileUtil.file_to_shock',
                                    [params], self._service_ver, context)

    def copy(self, params, context=None):
        """
        Copy a file from one location to another.
        :param params: instance of type "CopyParams" (* Input parameters
           for the copy function. * Required arguments: *     string
           source_file_path - the path to the source file *     string
           destination_file_path - the path to the destination file *
           Optional arguments: *     boolean overwrite - if true, overwrite
           the destination file if it exists) -> structure: parameter
           "source_file_path" of String, parameter "destination_file_path"
           of String, parameter "overwrite" of type "boolean" (@range
           [0,1])
        :returns: instance of type "CopyOutput" (* Output parameters for
           the copy function. * Returned data: *     string destination_file_path
           - the path to the destination file) -> structure: parameter
           "destination_file_path" of String
        """
        return self._client.run_job('DataFileUtil.copy',
                                    [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.run_job('DataFileUtil.status',
                                    [], self._service_ver, context)
